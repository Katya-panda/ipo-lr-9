from collision.isCorrectRect import isCorrectRect  # импортируем функцию isCorrectRect из модуля collision для проверки корректности прямоугольника
def intersectionAreaRect(rect1, rect2):
    # проверка корректности первого и второго прямоугольников
    # если прямоугольник некорректный, вызываем ошибку
    if not isCorrectRect(rect1):
        raise ValueError("1й прямоугольник некоректный")
    if not isCorrectRect(rect2):
        raise ValueError("2й прямоугольник некоректный")
    # распаковка координат из списка для первого прямоугольника
    (x1_min, y1_min), (x1_max, y1_max) = rect1
    # распаковка координат из списка для второго прямоугольника
    (x2_min, y2_min), (x2_max, y2_max) = rect2
    # вычисление перекрывающейся области по оси x:
    # определяем левую границу перекрытия как максимальную из минимальных координат по x (наибольшее из x1_min и x2_min)
    # определяем правую границу перекрытия как минимальную из максимальных координат по x (наименьшее из x1_max и x2_max)
    # если левая граница больше правой, значит перекрытия нет, и перекрывающаяся область по x равна 0
    x_overlap = max(0, min(x1_max, x2_max) - max(x1_min, x2_min))
    # вычисление перекрывающейся области по оси y:
    # определяем нижнюю границу перекрытия как максимальную из минимальных координат по y (наибольшее из y1_min и y2_min)
    # определяем верхнюю границу перекрытия как минимальную из максимальных координат по y (наименьшее из y1_max и y2_max)
    # если нижняя граница больше верхней, значит перекрытия нет, и перекрывающаяся область по y равна 0
    y_overlap = max(0, min(y1_max, y2_max) - max(y1_min, y2_min))
    # площадь пересечения двух прямоугольников равна произведению перекрывающихся областей по x и y
    return x_overlap * y_overlap
